// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react

declare module 'edk-web-components' {
    export { Datepicker as EDKDatepicker } from 'edk-web-components/datepicker';
    export { EDKAlert } from 'edk-web-components/alert';
    export { CodeInput as EDKCodeInput } from 'edk-web-components/code-input';
    export { DonutChart as EDKDonutChart } from 'edk-web-components/donut-cart';
    export { LineChart as EDKLineChart } from 'edk-web-components/line-chart';
    export { TwoYAxisLineChart as EDKTwoYAxisLineChart } from 'edk-web-components/line-chart/two-y-axis-chart';
    export { Loading as EDKLoading } from 'edk-web-components/loading';
    export { CenteredModal as EDKCenteredModal } from 'edk-web-components/modal/centered-modal';
    export { Modal as EDKModal } from 'edk-web-components/modal';
    export { Pagination as EDKPagination } from 'edk-web-components/pagination';
    export { Portal as EDKPortal } from 'edk-web-components/portal';
    export { ProgressLine as EDKProgressLine } from 'edk-web-components/progress-line';
    export { Tooltip as EDKTooltip } from 'edk-web-components/tooltip';
    export { Checkbox as EDKCheckbox } from 'edk-web-components/checkbox';
    export { EDKInput, EDKSelect, EDKTitleField, EDKTextField, EDKSubTitleField, EDKSingleCheckbox, EDKSeparatorField, EDKSelectField, EDKRadioField, EDKPhoneField, EDKLabelField, EDKFileField, EDKDatepickerRangeField, EDKDatepickerField, EDKCheckboxField, EDKInputField } from 'edk-web-components/input/expose';
    export { Flex, FlexCenter, FlexRow, FlexRowCenter, FlexOne, FlexOneCenter } from 'edk-web-components/flex';
    export { numberFormat, moneyFormat, formattedDate, shortNumberFormat, clamp, randomChar, isBlank } from 'edk-web-components/functions';
}

declare module 'edk-web-components/datepicker' {
    import React from 'react';
    interface IDatepickerProps {
        language?: string;
        defaultDate?: Date | string | number;
        maxDate?: any;
        minDate?: any;
        type?: 'datepicker' | 'datetimepiker';
        selectedMonth?: number;
        selectedYear?: number;
        onDateChanged(date: Date): void;
        disabled?: boolean;
        hoverStart?: any;
        hoverEnd?: any;
        selectedStart?: any;
        selectedEnd?: any;
        onHoverDate?(date: any): void;
        style?: any;
        events?: string[] | Date[] | number[];
        onChangeDisplay?: (month: number, year: number) => void;
        disabledSelect?: boolean;
    }
    function _Datepicker(props: IDatepickerProps): JSX.Element;
    export const Datepicker: React.MemoExoticComponent<typeof _Datepicker>;
    export {};
}

declare module 'edk-web-components/alert' {
    import { IAlertShow } from 'edk-web-components/alert/platform/web';
    interface IAlert {
        show: (params: IAlertShow) => void;
    }
    export const EDKAlert: IAlert;
    export {};
}

declare module 'edk-web-components/code-input' {
    import React from 'react';
    function _CodeInput(props: {
        onComplete(code: any): void;
        onCodeChanged(code: any): void;
        size?: number;
        dimension?: number;
        handleRef?: any;
        disabled?: boolean;
    }): JSX.Element;
    export const CodeInput: React.MemoExoticComponent<typeof _CodeInput>;
    export {};
}

declare module 'edk-web-components/donut-cart' {
    import React from 'react';
    interface IDonutData {
        percentage: number;
        label: string;
        color?: string;
        typeId?: number;
        value?: any;
    }
    function _DonutChart(props: {
        data?: IDonutData[];
        defaultSelected?: number;
        language?: string;
        size: number;
        providedInnerText?: string;
        providedInnerValue?: string;
        hideCenter?: boolean;
        small?: boolean;
        onSelectedSlice?(index: number): void;
    }): JSX.Element;
    export const DonutChart: React.MemoExoticComponent<typeof _DonutChart>;
    export {};
}

declare module 'edk-web-components/line-chart' {
    import React from 'react';
    import { Point } from 'edk-web-components/line-chart/util';
    function _LineChart(props: {
        language: string;
        data: Point[][];
        labels: string[];
        formattedValue?: ((val: any) => void)[];
    }): JSX.Element;
    export const LineChart: React.MemoExoticComponent<typeof _LineChart>;
    export {};
}

declare module 'edk-web-components/line-chart/two-y-axis-chart' {
    import React from 'react';
    function _TwoYAxisLineChart(props: {
        language: string;
        data: number[][];
        labels: string[];
        date: string[];
        formattedValue?: ((val: any) => void)[];
    }): JSX.Element;
    export const TwoYAxisLineChart: React.MemoExoticComponent<typeof _TwoYAxisLineChart>;
    export {};
}

declare module 'edk-web-components/loading' {
    import React from 'react';
    function _Loading(props: {
        size?: number;
        color?: string;
    }): JSX.Element;
    export const Loading: React.MemoExoticComponent<typeof _Loading>;
    export {};
}

declare module 'edk-web-components/modal/centered-modal' {
    import React from 'react';
    function _CenteredModal(props: {
        isShow: boolean;
        style?: any;
        onCloseRequested?(): void;
        children: any;
        ignoreResize?: boolean;
        handleResize?: any;
    }): JSX.Element;
    export const CenteredModal: React.MemoExoticComponent<typeof _CenteredModal>;
    export {};
}

declare module 'edk-web-components/modal' {
    import React from 'react';
    function _Modal(props: {
        isShow: boolean;
        style?: any;
        onCloseRequested?(): void;
        children: any;
    }): JSX.Element;
    export const Modal: React.MemoExoticComponent<typeof _Modal>;
    export {};
}

declare module 'edk-web-components/pagination' {
    import React from 'react';
    function _Pagination(props: {
        page: number;
        totalPage: number;
        onSelectedPage?(number: any): void;
        onNextClicked?(): void;
        onPrevClicked?(): void;
    }): JSX.Element;
    export const Pagination: React.MemoExoticComponent<typeof _Pagination>;
    export {};
}

declare module 'edk-web-components/portal' {
    import React from 'react';
    export class Portal extends React.Component<{
        selector: string;
    }> {
        componentDidMount(): void;
        render(): React.ReactPortal | null;
    }
}

declare module 'edk-web-components/progress-line' {
    import React from 'react';
    function _ProgressLine(props: {
        percent: number;
        color?: string;
        height?: number;
    }): JSX.Element;
    export const ProgressLine: React.MemoExoticComponent<typeof _ProgressLine>;
    export {};
}

declare module 'edk-web-components/tooltip' {
    import React from 'react';
    function _Tooltip(props: {
        children: any;
        title?: string;
        className?: any;
    }): JSX.Element;
    export const Tooltip: React.MemoExoticComponent<typeof _Tooltip>;
    export {};
}

declare module 'edk-web-components/checkbox' {
    import React from 'react';
    function _Checkbox(props: {
        active?: boolean;
        controlled?: boolean;
        onToggle?(nextActive: boolean): void;
        round?: boolean;
    }): JSX.Element;
    export const Checkbox: React.MemoExoticComponent<typeof _Checkbox>;
    export {};
}

declare module 'edk-web-components/input/expose' {
    export { EDKSelect } from 'edk-web-components/input/select';
    export { EDKInput } from 'edk-web-components/input/index';
    export { EDKTitleField } from 'edk-web-components/input/_type/title-field';
    export { EDKTextField } from 'edk-web-components/input/_type/text-field';
    export { EDKSubTitleField } from 'edk-web-components/input/_type/subtitle-field';
    export { EDKSingleCheckbox } from 'edk-web-components/input/_type/single-checkbox-field';
    export { EDKSeparatorField } from 'edk-web-components/input/_type/separator-field';
    export { EDKSelectField } from 'edk-web-components/input/_type/select-field';
    export { EDKRadioField } from 'edk-web-components/input/_type/radio-field';
    export { EDKPhoneField } from 'edk-web-components/input/_type/phone-field';
    export { EDKLabelField } from 'edk-web-components/input/_type/label-field';
    export { EDKFileField } from 'edk-web-components/input/_type/file-field';
    export { EDKDatepickerRangeField } from 'edk-web-components/input/_type/datepicker-range-field';
    export { EDKDatepickerField } from 'edk-web-components/input/_type/datepicker-field';
    export { EDKCheckboxField } from 'edk-web-components/input/_type/checkbox-field';
    export { EDKInputField } from 'edk-web-components/input/field';
}

declare module 'edk-web-components/flex' {
    export const Flex: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const FlexCenter: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const FlexRow: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const FlexRowCenter: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const FlexOne: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const FlexOneCenter: import("styled-components").StyledComponent<"div", any, {}, never>;
    export default Flex;
}

declare module 'edk-web-components/functions' {
    export const numberFormat: (value: any, lang: string, fraction?: number | undefined) => string;
    export const moneyFormat: (value: any, lang: string, fraction?: number | undefined, _currency?: string | undefined) => string;
    export const formattedDate: (_date: any, lang: string, withTime?: boolean | undefined, short?: boolean | undefined, withoutYear?: boolean | undefined) => string | undefined;
    export const shortNumberFormat: (param: any, language: string, precision?: number | undefined) => any;
    export const clamp: (val: number, min: number, max: number) => number;
    export const randomChar: () => string;
    export const isBlank: (str: string) => boolean;
}

declare module 'edk-web-components/alert/platform/web' {
    import React from 'react';
    export interface IAlertShow {
        id?: string;
        title: string;
        subtitle?: string;
        type?: 'warning' | 'success' | 'info';
        timeout?: number;
    }
    function _ModAlertWeb(props: IAlertShow): JSX.Element | null;
    export const ModAlertWeb: React.MemoExoticComponent<typeof _ModAlertWeb>;
    export {};
}

declare module 'edk-web-components/line-chart/util' {
    export type Point = {
        x: any;
        y: number;
    };
    export type MinMax = {
        max: number | null;
        min: number | null;
    };
    export type FirstLast = {
        first: any;
        last: any;
    };
    export const ChartColors: string[];
    export const SoftChartColors: string[];
    export const HideLeft = 1000000;
    export const lineChartAction: (language: string, data: Point[][], madeUpScale: boolean, containerRef: {
        current: any;
    }, cursorContainerRef: {
        current: any;
    }[], verticalCursorRef: {
        current: any;
    }, selectedDateDetailRef: {
        current: any;
    }, detailTextRef: {
        current: any;
    }[], detailItemContainerRef: {
        current: any;
    }[], detailContainerRef: {
        current: any;
    }, formattedValue: ((val: any) => any)[]) => {
        verticalMaxMin: MinMax;
        firstAndLastDate: FirstLast;
        lines: any[] | undefined;
        getLabel: (position: number) => void;
    };
    export const twoYAxisLineChartAction: (language: string, data: number[][], date: string[], containerRef: {
        current: any;
    }, cursorContainerRef: {
        current: any;
    }[], verticalCursorRef: {
        current: any;
    }, selectedDateDetailRef: {
        current: any;
    }, detailTextRef: {
        current: any;
    }[], detailItemContainerRef: {
        current: any;
    }[], detailContainerRef: {
        current: any;
    }, formattedValue: ((val: any) => any)[]) => {
        verticalMaxMin: MinMax[];
        firstAndLastDate: FirstLast;
        lines: string[] | undefined;
        getLabel: (listIndex: number, position: number) => void;
    };
}

declare module 'edk-web-components/input/select' {
    import React from 'react';
    import { CustomInputProps } from 'edk-web-components/input';
    interface ISelectProps extends CustomInputProps {
        menuClassName?: any;
    }
    function Selects(props: ISelectProps): JSX.Element;
    const _default: React.MemoExoticComponent<typeof Selects>;
    export default _default;
    export const EDKSelect: typeof Selects;
}

declare module 'edk-web-components/input/index' {
    import React from 'react';
    export const StringTrailingIcon: import("styled-components").StyledComponent<"div", any, any, never>;
    export type HideOnOperator = 'equals' | 'notEquals';
    export type Operators = 'or' | 'and';
    export interface IOption {
        code: any;
        value: any;
        icon?: any;
    }
    export interface ICriteria {
        fieldId: string;
        operator: HideOnOperator;
        operand: any;
    }
    export interface IBehaviour {
        type: 'hide' | 'value' | 'option' | 'required';
        blocks: {
            blockCriteria: [{
                criteria: ICriteria[];
                operators: Operators[];
            }, {
                criteria: ICriteria[];
                operators: Operators[];
            }];
            operators: Operators[];
        };
        value?: any;
        option?: IOption[];
    }
    export interface CustomInputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange'> {
        language?: string;
        fieldId: string;
        label?: string;
        ref?: any;
        textarea?: boolean;
        onChange(fieldId: string, value: any, error?: string, extraData?: any): void;
        onUpload?(fieldId: string, fieldType: string, file: any, cb: any): void;
        onGetImage?(fileId: string, onSuccess: any): void;
        info?: string;
        error?: string;
        skipValidation?: boolean;
        numeric?: boolean;
        currency?: boolean;
        inputType?: any;
        options?: IOption[];
        leadingIcon?: any;
        trailingIcon?: any;
        trailingText?: any;
        onTrailingIconSelect?: () => any;
        onLeadingIconSelect?: () => any;
        inputClassName?: string;
        floatingLabelClassName?: string;
        textStyle?: 'uppercase' | 'capitalize' | 'startCase';
        regex?: any;
        masking?: any;
        maxLength?: number;
        fileType?: any;
        value?: any;
        isAnchor?: boolean;
        anchorOptions?: any;
        hide?: boolean;
        isArray?: boolean;
        multiple?: boolean;
        behaviour?: IBehaviour;
        parentStyle?: any;
        id?: string;
        disableChange?: boolean;
    }
    function Inputs(props: CustomInputProps): JSX.Element;
    const _default: React.MemoExoticComponent<typeof Inputs>;
    export default _default;
    export const EDKInput: typeof Inputs;
}

declare module 'edk-web-components/input/_type/title-field' {
    export const EDKTitleField: any;
}

declare module 'edk-web-components/input/_type/text-field' {
    export const EDKTextField: any;
}

declare module 'edk-web-components/input/_type/subtitle-field' {
    export const EDKSubTitleField: any;
}

declare module 'edk-web-components/input/_type/single-checkbox-field' {
    export const EDKSingleCheckbox: any;
}

declare module 'edk-web-components/input/_type/separator-field' {
    export const EDKSeparatorField: any;
}

declare module 'edk-web-components/input/_type/select-field' {
    export const EDKSelectField: any;
}

declare module 'edk-web-components/input/_type/radio-field' {
    export const EDKRadioField: any;
}

declare module 'edk-web-components/input/_type/phone-field' {
    export const StringIcon: import("styled-components").StyledComponent<"div", any, any, never>;
    export const EDKPhoneField: any;
}

declare module 'edk-web-components/input/_type/label-field' {
    export const EDKLabelField: any;
}

declare module 'edk-web-components/input/_type/file-field' {
    export const EDKFileField: any;
}

declare module 'edk-web-components/input/_type/datepicker-range-field' {
    export const EDKDatepickerRangeField: any;
}

declare module 'edk-web-components/input/_type/datepicker-field' {
    import { CustomInputProps } from 'edk-web-components/input';
    export const AsShadow: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const DateContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const Container: import("styled-components").StyledComponent<"div", any, {}, never>;
    export const AsModal: import("styled-components").StyledComponent<"div", any, any, never>;
    export interface IDatepickerFieldProps extends CustomInputProps {
        minDate?: Date;
        maxDate?: Date;
        toFieldId?: string;
        toValue?: any;
        dateType?: any;
        modalStyle?: any;
    }
    export const EDKDatepickerField: any;
}

declare module 'edk-web-components/input/_type/checkbox-field' {
    export const EDKCheckboxField: any;
}

declare module 'edk-web-components/input/field' {
    import React from 'react';
    import { CustomInputProps, Operators } from 'edk-web-components/input';
    export interface IRemoteFormDefinition {
        rows: number;
        fields: CustomInputProps[];
    }
    export const getFormValue: (flattenForm: CustomInputProps[]) => object;
    export const getFormError: (flattenForm: CustomInputProps[], language: string) => {
        fieldId: string;
        error: string;
    }[];
    export const getFlattenForm: (formDefinition: IRemoteFormDefinition[]) => CustomInputProps[];
    export const getAllAffectedFields: (fieldAffectedOther: {
        fieldId: string;
        target: string[];
    }[], fieldId: string, result: String[]) => String[];
    export const processBehaviour: (type: any, operand: any, value?: any, option?: any) => any;
    export const evalBehaviour: (vals: boolean[], oprt: Operators[]) => boolean | undefined;
    export const behaviourCheck: (formDefinition: IRemoteFormDefinition[], fieldAffectedOther: {
        fieldId: string;
        target: string[];
    }[], fieldId: string, target: string[], formPath: any) => object;
    function _Field(props: CustomInputProps): JSX.Element | null;
    export const EDKInputField: React.MemoExoticComponent<typeof _Field>;
    export {};
}

declare module 'edk-web-components/input' {
    import React from 'react';
    export const StringTrailingIcon: import("styled-components").StyledComponent<"div", any, any, never>;
    export type HideOnOperator = 'equals' | 'notEquals';
    export type Operators = 'or' | 'and';
    export interface IOption {
        code: any;
        value: any;
        icon?: any;
    }
    export interface ICriteria {
        fieldId: string;
        operator: HideOnOperator;
        operand: any;
    }
    export interface IBehaviour {
        type: 'hide' | 'value' | 'option' | 'required';
        blocks: {
            blockCriteria: [{
                criteria: ICriteria[];
                operators: Operators[];
            }, {
                criteria: ICriteria[];
                operators: Operators[];
            }];
            operators: Operators[];
        };
        value?: any;
        option?: IOption[];
    }
    export interface CustomInputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange'> {
        language?: string;
        fieldId: string;
        label?: string;
        ref?: any;
        textarea?: boolean;
        onChange(fieldId: string, value: any, error?: string, extraData?: any): void;
        onUpload?(fieldId: string, fieldType: string, file: any, cb: any): void;
        onGetImage?(fileId: string, onSuccess: any): void;
        info?: string;
        error?: string;
        skipValidation?: boolean;
        numeric?: boolean;
        currency?: boolean;
        inputType?: any;
        options?: IOption[];
        leadingIcon?: any;
        trailingIcon?: any;
        trailingText?: any;
        onTrailingIconSelect?: () => any;
        onLeadingIconSelect?: () => any;
        inputClassName?: string;
        floatingLabelClassName?: string;
        textStyle?: 'uppercase' | 'capitalize' | 'startCase';
        regex?: any;
        masking?: any;
        maxLength?: number;
        fileType?: any;
        value?: any;
        isAnchor?: boolean;
        anchorOptions?: any;
        hide?: boolean;
        isArray?: boolean;
        multiple?: boolean;
        behaviour?: IBehaviour;
        parentStyle?: any;
        id?: string;
        disableChange?: boolean;
    }
    function Inputs(props: CustomInputProps): JSX.Element;
    const _default: React.MemoExoticComponent<typeof Inputs>;
    export default _default;
    export const EDKInput: typeof Inputs;
}

